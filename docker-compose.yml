services:
  # Database services (start first)
  db:
    image: postgres:14
    container_name: ai-code-review-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=codereviewer
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:6-jammy
    container_name: ai-code-review-mongodb
    environment:
      - MONGO_INITDB_DATABASE=codereviewer
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: ai-code-review-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend service
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-code-review-backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/codereviewer
      - MONGODB_URL=mongodb://mongodb:27017/codereviewer
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=dev-secret-key-change-in-production
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID:-}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET:-}
      - GITHUB_WEBHOOK_SECRET=${GITHUB_WEBHOOK_SECRET:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - SONARQUBE_TOKEN=${SONARQUBE_TOKEN:-}
      - DEBUG=true
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_cache:/app/__pycache__
    networks:
      - app-network
    restart: unless-stopped

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ai-code-review-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID:-}
      - NODE_ENV=development
      - WATCHPACK_POLLING=true  # Enable polling for file changes in Docker
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_next:/app/.next
    networks:
      - app-network
    restart: unless-stopped

# Networks
networks:
  app-network:
    driver: bridge
    name: ai-code-review-network

# Volumes
volumes:
  postgres_data:
    name: ai-code-review-postgres-data
  mongodb_data:
    name: ai-code-review-mongodb-data
  redis_data:
    name: ai-code-review-redis-data
  backend_cache:
    name: ai-code-review-backend-cache
  frontend_node_modules:
    name: ai-code-review-frontend-node-modules
  frontend_next:
    name: ai-code-review-frontend-next
